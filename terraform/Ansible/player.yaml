- name: Set up Docker and dependencies
  hosts: all
  become: true
  vars:
    docker_package: docker-ce
    python_package: python3

  tasks:
    - name: Update all packages
      apt:
        name: "*"
        state: latest
        update_cache: yes
  
    - name: Install Docker dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes
        force_apt_get: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Update APT package cache
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name: "{{ docker_package }}"
        state: present

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install Python3
      apt:
        name: "{{ python_package }}"
        state: present

    - name: Ensure Git is installed
      apt:
        name: git
        state: present

- name: Deploy Application
  hosts: all
  become: true
  vars:
    app_repo: "https://github.com/enitos11/easy-school.git"
    app_dir: "/var/www/easy-school"
    app_port: 3000
    docker_image_name: "enitos/easy-school"
    docker_container_name: "enitos-container"

  tasks:
    - name: Clone the application repository
      git:
        repo: "{{ app_repo }}"
        dest: "{{ app_dir }}"
        version: enny
        force: true

    - name: Build Docker image for the application
      command: "docker build -t {{ docker_image_name }}:latest {{ app_dir }}"

    - name: Stop any running container with the same name
      shell: "docker stop {{ docker_container_name }} || true"
      ignore_errors: true

    - name: Remove any existing container with the same name
      shell: "docker rm {{ docker_container_name }} || true"
      ignore_errors: true

    - name: Run the application container
      shell: "docker run -d --name {{ docker_container_name }} -p {{ app_port }}:80 {{ docker_image_name }}:latest"

    - name: Ensure the container is running
      shell: "docker ps | grep {{ docker_container_name }}"
      register: docker_status
      failed_when: docker_status.rc != 0

